<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Llyr&#39;s Blog</title>
  
  
  <link href="https://blog.prashantgiri360.com.np/atom.xml" rel="self"/>
  
  <link href="https://blog.prashantgiri360.com.np/"/>
  <updated>2025-04-04T20:08:00.000Z</updated>
  <id>https://blog.prashantgiri360.com.np/</id>
  
  <author>
    <name>Llyr4472</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTB Sherlock TrainingDay</title>
    <link href="https://blog.prashantgiri360.com.np/TrainingDay%20Walkthrough/"/>
    <id>https://blog.prashantgiri360.com.np/TrainingDay%20Walkthrough/</id>
    <published>2025-04-04T15:51:00.000Z</published>
    <updated>2025-04-04T20:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTB-Easy-Sherlock"><a href="#HTB-Easy-Sherlock" class="headerlink" title="HTB Easy Sherlock"></a>HTB Easy Sherlock</h4><ul><li>Challenge: <a class="link"   href="https://app.hackthebox.com/sherlocks/TrainingDay" >https://app.hackthebox.com/sherlocks/TrainingDay<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li><li>Attachments:<ul><li>URL: <a class="link"   href="https://challenges-cdn.hackthebox.com/sherlocks/easy/TrainingDay.zip?u=1009643&p=mp&e=1743768663&t=1743761463&h=d0453236b1ccb3782d2f36f8b1b49f4024a600a1706d0a1cf919703e22b1b5d0" >https://challenges-cdn.hackthebox.com/sherlocks/easy/TrainingDay.zip?u=1009643&amp;p=mp&amp;e=1743768663&amp;t=1743761463&amp;h=d0453236b1ccb3782d2f36f8b1b49f4024a600a1706d0a1cf919703e22b1b5d0<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li><li>Password: hacktheblue</li></ul></li><li>Background:<blockquote><p>A fresh new day, a well-rested cybersecurity professional—ready to learn something new after a chaotic week. Scrolling through challenges, they stumble upon TrainingDay, download the artifacts, and boom—three different binaries, each doing its own thing. Do they panic? Nope. This is exactly what they signed up for—some good old-fashioned reversing fun. If this sounds like you, what are you waiting for? Grab your debugger and dive in!</p></blockquote></li></ul><h1 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h1><p>This is a pretty lengthy CTF. Lets get started by extracting the zip file using the given password. There are 3 executables in the files. </p><ol><li><p>Lets pass the first executable through <em>hash my file</em> to get its sha256 sum.</p></li><li><p>To get further info about the file, I passed it to <em>Detect It Easy</em> Tool which gave following output:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/60c20fccd134dcb4ce53f939d32472b6_MD5.jpeg"                                     ><br>This gave us the answer on IDE used, CPU architecture and if it was stripped or not.</p></li><li><p>The next question asks for the full PDB path. For this, I used <em>PE Bear</em>. Opening the executable and looking at debug section in .text gave the PDB path we were asked. It also contained the windows username which was asked by next question.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/ddbc36bf3bc157e77efb66d15dd51c04_MD5.jpeg"                                     ></p></li><li><p>Next questions ask about arguments passed to function inside the executable. Lets open the executable in IDA and analyze it. The starting <code>int __cdecl main (...</code> indicated that the calling convention used is cdel.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/9b10169941d331c5425d13454f78c5c5_MD5.jpeg"                                     ></p></li></ol><blockquote><p>We need to understand cdel convention before we can answer the next questions. In this convention, arguments are passed using the <strong>stack (LIFO - Last In, First Out)</strong>. This means that if we imagine the stack as a <em>pringles</em> <em>can</em>, the end of the <em>can</em> will be our <code>base pointer</code> and each variable we add to the stack is like pringles being loaded in the <em>can</em>. When we need to eat we will take out the piece towards the mouth i.e the last one we put in, same happns here, when a variable is removed it will be the last one that was put.</p></blockquote><pre><code>1. Let&#39;s look at the code:</code></pre><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">var_18= dword ptr -18h</span><br><span class="line">var_14= byte ptr -14h</span><br><span class="line">var_10= byte ptr -10h</span><br><span class="line">var_C= byte ptr -0Ch</span><br><span class="line">var_8= byte ptr -8</span><br><span class="line">var_4= byte ptr -4</span><br><span class="line">argc= dword ptr  8</span><br><span class="line">argv= dword ptr  0Ch</span><br><span class="line">envp= dword ptr  10h</span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 18h</span><br><span class="line">push    offset Format   ; &quot;Enter Number 1 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     eax, [ebp+var_14]</span><br><span class="line">push    eax             ; char</span><br><span class="line">push    offset aD       ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber2 ; &quot;Enter Number 2 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     ecx, [ebp+var_10]</span><br><span class="line">push    ecx             ; char</span><br><span class="line">push    offset aD_0     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber3 ; &quot;Enter Number 3 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     edx, [ebp+var_C]</span><br><span class="line">push    edx             ; char</span><br><span class="line">push    offset aD_1     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber4 ; &quot;Enter Number 4 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     eax, [ebp+var_8]</span><br><span class="line">push    eax             ; char</span><br><span class="line">push    offset aD_2     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber5 ; &quot;Enter Number 5 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     ecx, [ebp+var_4]</span><br><span class="line">push    ecx             ; char</span><br><span class="line">push    offset aD_3     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br></pre></td></tr></table></figure></div><ol start="5"><li><p>So, the order of arguments is reversed. This means the last variable we passed, i.e., <code>var_4</code>, is the first argument on the stack and will be at the lowest address (<code>esp</code>). The second argument is the second-last one we passed, i.e., <code>var_8</code>, and its location is at higher address i.e. <code>esp + 4</code>. And the process goes on for the other arguments.</p></li><li><p>The return value will be at <code>eax</code> cuz that’s what it is for.</p></li><li><p>Now lets open the second file in IDA and analyze. The code looks like following:</p></li></ol><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">; Attributes: bp-based frame</span><br><span class="line"></span><br><span class="line">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">_main proc near</span><br><span class="line"></span><br><span class="line">var_18= dword ptr -18h</span><br><span class="line">var_14= byte ptr -14h</span><br><span class="line">var_10= byte ptr -10h</span><br><span class="line">var_C= byte ptr -0Ch</span><br><span class="line">var_8= byte ptr -8</span><br><span class="line">var_4= byte ptr -4</span><br><span class="line">argc= dword ptr  8</span><br><span class="line">argv= dword ptr  0Ch</span><br><span class="line">envp= dword ptr  10h</span><br><span class="line"></span><br><span class="line">push    ebp</span><br><span class="line">mov     ebp, esp</span><br><span class="line">sub     esp, 18h</span><br><span class="line">push    offset Format   ; &quot;Enter Number 1 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     eax, [ebp+var_14]</span><br><span class="line">push    eax             ; char</span><br><span class="line">push    offset aD       ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber2 ; &quot;Enter Number 2 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     ecx, [ebp+var_10]</span><br><span class="line">push    ecx             ; char</span><br><span class="line">push    offset aD_0     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber3 ; &quot;Enter Number 3 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     edx, [ebp+var_C]</span><br><span class="line">push    edx             ; char</span><br><span class="line">push    offset aD_1     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber4 ; &quot;Enter Number 4 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     eax, [ebp+var_8]</span><br><span class="line">push    eax             ; char</span><br><span class="line">push    offset aD_2     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">push    offset aEnterNumber5 ; &quot;Enter Number 5 : &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 4</span><br><span class="line">lea     ecx, [ebp+var_4]</span><br><span class="line">push    ecx             ; char</span><br><span class="line">push    offset aD_3     ; &quot;%d&quot;</span><br><span class="line">call    sub_4010C0</span><br><span class="line">add     esp, 8</span><br><span class="line">mov     edx, dword ptr [ebp+var_4]</span><br><span class="line">push    edx</span><br><span class="line">mov     eax, dword ptr [ebp+var_8]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, dword ptr [ebp+var_C]</span><br><span class="line">push    ecx</span><br><span class="line">mov     edx, dword ptr [ebp+var_10]</span><br><span class="line">mov     ecx, dword ptr [ebp+var_14]</span><br><span class="line">call    sub_401100</span><br><span class="line">mov     [ebp+var_18], eax</span><br><span class="line">mov     edx, [ebp+var_18]</span><br><span class="line">push    edx</span><br><span class="line">mov     eax, dword ptr [ebp+var_4]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, dword ptr [ebp+var_8]</span><br><span class="line">push    ecx</span><br><span class="line">mov     edx, dword ptr [ebp+var_C]</span><br><span class="line">push    edx</span><br><span class="line">mov     eax, dword ptr [ebp+var_10]</span><br><span class="line">push    eax</span><br><span class="line">mov     ecx, dword ptr [ebp+var_14]</span><br><span class="line">push    ecx             ; char</span><br><span class="line">push    offset aDDDDDD  ; &quot;%d + %d + %d + %d + %d = %d &quot;</span><br><span class="line">call    sub_401050</span><br><span class="line">add     esp, 1Ch</span><br><span class="line">xor     eax, eax</span><br><span class="line">mov     esp, ebp</span><br><span class="line">pop     ebp</span><br><span class="line">retn</span><br><span class="line">_main endp</span><br></pre></td></tr></table></figure></div><p>It appears to be awfully same. Lets try <code>cdecl</code> as the convention, it isn’t. Trying <code>fastcall</code> as the convention, it appears to be it. </p><blockquote><p>Since the code used fastcall convention we need to understand it. Fastcall api is similar to <code>cdecl</code> but in fastcall, the first two variables are directly stored in register and the remaining data is stored in stack normally. It also follows LIFO rule so the arguments are actually reversed in stack. Looking at the code, it appears to be a 32 bit system code so the first two variables (var_14 &amp; var_10) must be stored in ecx and edx and other in the stack.</p></blockquote><ol start="8"><li><p>For the variables stored in stack, the 3rd will be at the top i.e. <code>esp</code> and next one above it i.e <code>esp+4</code> and then <code>esp+8</code>. For some reason the stack arguments were not reversed. This code itself looks weird cuz its stated as cdecl but is fastcall. Idk maybe comment if u know. </p></li><li><p>Lets analyze the 3rd file now. Opening it in <em>DIE</em> we can see that it is designed for<code>64 bit</code> systems.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/f3794443e22b3c8dc0aeaafa7a3694e0_MD5.jpeg"                                     ></p></li><li><p>Analyzing its code in IDA</p></li></ol><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">; int __fastcall main(int argc, const char **argv, const char **envp)</span><br><span class="line">main proc near</span><br><span class="line"></span><br><span class="line">var_48= dword ptr -48h</span><br><span class="line">var_40= dword ptr -40h</span><br><span class="line">var_38= dword ptr -38h</span><br><span class="line">var_28= dword ptr -28h</span><br><span class="line">var_24= dword ptr -24h</span><br><span class="line">var_20= dword ptr -20h</span><br><span class="line">var_1C= dword ptr -1Ch</span><br><span class="line">var_18= dword ptr -18h</span><br><span class="line">var_14= dword ptr -14h</span><br><span class="line"></span><br><span class="line">sub     rsp, 68h</span><br><span class="line">lea     rcx, aEnterNumber1 ; &quot;Enter Number 1 : &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">lea     rdx, [rsp+68h+var_18]</span><br><span class="line">lea     rcx, aD         ; &quot;%d&quot;</span><br><span class="line">call    sub_140001120</span><br><span class="line">lea     rcx, aEnterNumber2 ; &quot;Enter Number 2 : &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">lea     rdx, [rsp+68h+var_1C]</span><br><span class="line">lea     rcx, aD_0       ; &quot;%d&quot;</span><br><span class="line">call    sub_140001120</span><br><span class="line">lea     rcx, aEnterNumber3 ; &quot;Enter Number 3 : &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">lea     rdx, [rsp+68h+var_20]</span><br><span class="line">lea     rcx, aD_1       ; &quot;%d&quot;</span><br><span class="line">call    sub_140001120</span><br><span class="line">lea     rcx, aEnterNumber4 ; &quot;Enter Number 4 : &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">lea     rdx, [rsp+68h+var_24]</span><br><span class="line">lea     rcx, aD_2       ; &quot;%d&quot;</span><br><span class="line">call    sub_140001120</span><br><span class="line">lea     rcx, aEnterNumber5 ; &quot;Enter Number 5 : &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">lea     rdx, [rsp+68h+var_28]</span><br><span class="line">lea     rcx, aD_3       ; &quot;%d&quot;</span><br><span class="line">call    sub_140001120</span><br><span class="line">mov     eax, [rsp+68h+var_28]</span><br><span class="line">mov     [rsp+68h+var_48], eax</span><br><span class="line">mov     r9d, [rsp+68h+var_24]</span><br><span class="line">mov     r8d, [rsp+68h+var_20]</span><br><span class="line">mov     edx, [rsp+68h+var_1C]</span><br><span class="line">mov     ecx, [rsp+68h+var_18]</span><br><span class="line">call    sub_140001180</span><br><span class="line">mov     [rsp+68h+var_14], eax</span><br><span class="line">mov     eax, [rsp+68h+var_14]</span><br><span class="line">mov     [rsp+68h+var_38], eax</span><br><span class="line">mov     eax, [rsp+68h+var_28]</span><br><span class="line">mov     [rsp+68h+var_40], eax</span><br><span class="line">mov     eax, [rsp+68h+var_24]</span><br><span class="line">mov     [rsp+68h+var_48], eax</span><br><span class="line">mov     r9d, [rsp+68h+var_20]</span><br><span class="line">mov     r8d, [rsp+68h+var_1C]</span><br><span class="line">mov     edx, [rsp+68h+var_18]</span><br><span class="line">lea     rcx, aDDDDDD    ; &quot;%d + %d + %d + %d + %d = %d &quot;</span><br><span class="line">call    sub_140001070</span><br><span class="line">xor     eax, eax</span><br><span class="line">add     rsp, 68h</span><br><span class="line">retn</span><br><span class="line">main endp</span><br></pre></td></tr></table></figure></div><p>It appears to be using fastcall convention. </p><blockquote><p>In fastcall convention, the first few arguments in registers instead of pushing them onto the stack. But in modern x86_64 systems others are also stored in registers r8, r9,etc if available This is done to make it fast ig :) And it also follows LIFO principal similar to cdel so the order is reversed.</p></blockquote><p>So, out first two and maybe more arguments are in registers and other in stack. Looking at the code, we can also see that, looking from bottom to top, these registered are used to store the arguments.</p><ol start="9"><li>For the 5th argument. first it is loaded into eax then stored in stack which can be seen below.</li></ol><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; Prepare arguments for sub_140001180</span><br><span class="line">mov     eax, [rsp+68h+var_28]  ; Load 5th number into EAX</span><br><span class="line">mov     [rsp+68h+var_48], eax  ; Store 5th number at [rsp + 68h - 48h] = [rsp + 20h]  &lt;-- This is the 5th argument location on stack</span><br><span class="line">; Other arguments stored in registers</span><br></pre></td></tr></table></figure></div><ol start="10"><li>Also, in fastcall convention, the return value of a function is stored in <code>rax</code> register.</li></ol><h1 id="Answers"><a href="#Answers" class="headerlink" title="Answers"></a>Answers</h1><ol><li><p>What is sha256sum hash of argumentT_baby_1.exe ?<br>&#x3D; dc6267608ddfcc5c80571ccd46475a03fb667baf8620d0e91c93ccacacf97ef6</p></li><li><p>Can you find development enviroment of malware author (e.g:ide)?<br>&#x3D; visual studio</p></li><li><p>What CPU architecture was argument_baby_1.exe compiled for ?<br>&#x3D; 32 bit</p></li><li><p>Is argument_baby_1.exe a symbol-stripped binary?<br>&#x3D; false</p></li><li><p>Retrieve the full PDB file path from the debug information of argument_baby_1.exe<br>&#x3D; C:\Users\HTB\Desktop\argument\Release\argument.pdb</p></li><li><p>The malware author was using a Windows OS. What was the associated username?<br>&#x3D; HTB</p></li><li><p>What calling convention is used in argument_baby_1.exe ?<br>&#x3D; cdecl</p></li><li><p>How is the 1st argument passed to the function in argument_baby_1.exe?<br>&#x3D; esp</p></li><li><p>How is the 2nd argument passed to the function in argument_baby_1.exe?<br>&#x3D; esp+4</p></li><li><p>How is the 3rd argument passed to the function in argument_baby_1.exe?<br>&#x3D; esp+8</p></li><li><p>How is the 4th argument passed to the function in argument_baby_1.exe?<br>&#x3D; esp+c</p></li><li><p>How is the 5th argument passed to the function in argument_baby_1.exe?<br>&#x3D; esp+10</p></li><li><p>Which CPU register holds the function’s return value in argument_baby_1.exe?<br>&#x3D; eax</p></li><li><p>What calling convention is used in argument_baby_2.exe ?<br>&#x3D; fastcall</p></li><li><p>How is the 1st argument passed to the function in argument_baby_2.exe?<br>&#x3D; ecx</p></li><li><p>How is the 2nd argument passed to the function in argument_baby_2.exe?<br>&#x3D; edx</p></li><li><p>How is the 3rd argument passed to the function in argument_baby_2.exe?<br>&#x3D; esp</p></li><li><p>How is the 4th argument passed to the function in argument_baby_2.exe?<br>&#x3D; esp+4</p></li><li><p>How is the 5th argument passed to the function in argument_baby_2.exe?<br>&#x3D; esp+8</p></li><li><p>What CPU architecture was argument_baby_3.exe compiled for ?<br>&#x3D; 64 bit</p></li><li><p>How is the 1st argument passed to the function in argument_baby_3.exe?<br>&#x3D; rcx</p></li><li><p>How is the 2nd argument passed to the function in argument_baby_3.exe?<br>&#x3D; rdx</p></li><li><p>How is the 3rd argument passed to the function in argument_baby_3.exe?<br>&#x3D; r8</p></li><li><p>How is the 4th argument passed to the function in argument_baby_3.exe?<br>&#x3D; r9</p></li><li><p>How is the 5th argument passed to the function in argument_baby_3.exe?<br>&#x3D; rsp+20</p></li><li><p>In the case of argument_baby_3.exe, which CPU register stores the function’s return value?<br>&#x3D; rax</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;HTB-Easy-Sherlock&quot;&gt;&lt;a href=&quot;#HTB-Easy-Sherlock&quot; class=&quot;headerlink&quot; title=&quot;HTB Easy Sherlock&quot;&gt;&lt;/a&gt;HTB Easy Sherlock&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Chal</summary>
      
    
    
    
    <category term="Malware Analysis" scheme="https://blog.prashantgiri360.com.np/categories/Malware-Analysis/"/>
    
    
    <category term="htb" scheme="https://blog.prashantgiri360.com.np/tags/htb/"/>
    
    <category term="walkthrough" scheme="https://blog.prashantgiri360.com.np/tags/walkthrough/"/>
    
    <category term="ctf" scheme="https://blog.prashantgiri360.com.np/tags/ctf/"/>
    
    <category term="Malware-Analysis" scheme="https://blog.prashantgiri360.com.np/tags/Malware-Analysis/"/>
    
  </entry>
  
  <entry>
    <title>Setting up SIEM Lab Using Wazuh</title>
    <link href="https://blog.prashantgiri360.com.np/Setting%20up%20SIEM%20Lab%20Using%20Wazuh/"/>
    <id>https://blog.prashantgiri360.com.np/Setting%20up%20SIEM%20Lab%20Using%20Wazuh/</id>
    <published>2025-04-04T14:27:23.675Z</published>
    <updated>2025-04-02T17:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This blog serves as an tutorial on  basic installation of SIEM lab at home using Wazuh which also doubles as a XDR.</p><p>Wazuh is a free, open-source and lightweight Security Information and Event Management (SIEM) and Extended Detection and Response (XDR) software. It is simple to install and get started. To learn more about Wazuh, visit their website <a class="link"   href="https://wazuh.com/" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p><p>Requirements for the setup (excluding host):</p><ul><li>Storage: 70GB</li><li>Memory: 8 GB</li></ul><p>Agents:</p><ul><li>Windows 10 Home</li><li>Ubuntu 24.04.2 LTS Desktop</li></ul><p>Server:</p><ul><li>Ubuntu 24.04.2 LTS Server</li></ul><p>At the end of this tutorial our wazuh dashboard will look like this:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/a8490cd5eb6b668de7a10e918b6b2af4_MD5.jpeg"                                     ></p><h2 id="1-Installing-SIEM-Server"><a href="#1-Installing-SIEM-Server" class="headerlink" title="1. Installing SIEM Server"></a>1. Installing SIEM Server</h2><p>We will use <em>vmware workstation pro</em> for setting up all of our devices. For SIEM server, we will do a minimal installation of ubuntu server and install wazuh in it.</p><h3 id="Installing-Ubuntu-Server"><a href="#Installing-Ubuntu-Server" class="headerlink" title="Installing Ubuntu Server"></a>Installing Ubuntu Server</h3><p>Installation of ubuntu is pretty stratight-forward,</p><ol><li>Download iso from <a class="link"   href="https://ubuntu.com/download/server" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> and VMWare workstation Pro from <a class="link"   href="https://support.broadcom.com/group/ecx/productdownloads?subfamily=VMware%20Workstation%20Pro" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>(or any other virtual machine platforms )</li><li>Install the VMWare Workstation Pro (skip if you already have one).</li><li>Create a vmware instance and add the downloaded iso. I used following provisioning:<ul><li>2 cores</li><li>2 GB Memory</li><li>30 GB Storage</li></ul></li><li>Start the vmware instance and install ubuntu with all default settings.</li><li>Reboot the instance after installation and login using the username and password set during the installation.</li></ol><h3 id="Installing-Configure-Wazuh"><a href="#Installing-Configure-Wazuh" class="headerlink" title="Installing &amp; Configure Wazuh"></a>Installing &amp; Configure Wazuh</h3><p>After installing ubuntu server, we will now install Wazuh. Wazuh is a lightweight and open-source SIEM Software.</p><p>Install Wazuh using following command.</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sO https://packages.wazuh.com/4.3/wazuh-install.sh &amp;&amp; sudo bash wazuh-install.sh -a -i</span><br></pre></td></tr></table></figure></div><p>After the installation, it will provide you with you <strong>username</strong> and <strong>password</strong>, note them down somewhere.</p><p>Now to access the dasboard, we will need our server’s ip. Use following command to get your ip address:</p><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure></div><p>It will return following output:<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/d7a4ac2548795cf6d3ca947705189206_MD5.jpeg"                                     ></p><p>Here on 2: after inet, 192.168.220.130 was my ip address. Opening it in a browser, <strong>outside my vm</strong>:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/0defef6c4cb900fdee2e63218e7c6f17_MD5.jpeg"                                     ></p><p>We can access the dashboard now. Login using the credentials we got after wazuh installation.</p><h3 id="Configuring-static-ip"><a href="#Configuring-static-ip" class="headerlink" title="Configuring static ip"></a>Configuring static ip</h3><p>To prevent our wazuh server ip from changing whenever it is restarted, we need to set it as static ip. </p><ol><li>Open netplan config file:</li></ol><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/netplan/50-cloud-init.yaml</span><br></pre></td></tr></table></figure></div><ol start="2"><li>Paste the following and save (Ctrl+X-&gt;Y)</li></ol><div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: networkd</span><br><span class="line">  ethernets:</span><br><span class="line">    enp0s3:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      addresses:</span><br><span class="line">        - 192.168.1.10/24</span><br><span class="line">      routes:</span><br><span class="line">        - to: default</span><br><span class="line">          via: 192.168.1.1</span><br><span class="line">      nameservers:</span><br><span class="line">        addresses: [8.8.8.8, 8.8.4.4]</span><br></pre></td></tr></table></figure></div><p>Now our server’s ip has ben set to <code>192.168.1.10</code> so we will use this to open dashboard and while setting up agents.</p><h2 id="Setting-up-Workstations"><a href="#Setting-up-Workstations" class="headerlink" title="Setting up Workstations"></a>Setting up Workstations</h2><p>We will connect two workstaions (one ubuntu and one windows) to our SIEM. First we will need these workstations. We will use VMs for our lab so I will do fresh installation of both machines.</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ol><li><p>Download windows 10 iso from <a class="link"   href="https://www.microsoft.com/en-us/software-download/windows10" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </p></li><li><p>Create a new VM instance, and install the downloaded Ubuntu iso using default settings. I used following provisions for my VM instance:</p><ul><li>2 CPU</li><li>4 GB RAM</li><li>25 GB Storage</li></ul></li><li><p>There are two methods to install the agent</p><p> a. Open the Wazuh web page in browser and click add agent. Enter the details and paste the given commands in your windows powershell.</p><p> b. Download Wazuh agent installer from <a class="link"   href="https://packages.wazuh.com/4.x/windows/wazuh-agent-4.11.2-1.msi" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> and run it. Then open powershell as admin and run following command</p> <div class="code-container" data-rel="Powershell"><figure class="iseeu highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;C:\Program Files (x86)\ossec-agent&quot;</span></span><br><span class="line">notepad .\ossec.conf</span><br></pre></td></tr></table></figure></div><p> Now edit the config file and add server ip and enrollement details as shown below:</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/3cb814280bfda1e1c8c5ea3ca9374ef9_MD5.jpeg"                                     ></p><ol start="4"><li>Now the windows machine should be shown in wazuh dashboard.</li></ol><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ol><li><p>Download ubuntu iso from <a class="link"   href="https://ubuntu.com/download/desktop/thank-you?version=24.04.2&architecture=amd64&lts=true" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p></li><li><p>Create a new VM instance, and install the downloaded Ubuntu iso using default settings. I used following provisions for my VM instance:</p><ul><li>2 CPU</li><li>4 GB RAM</li><li>15 GB Storage</li></ul></li><li><p>Open the Wazuh web page in browser and click add agent. Enter the details and paste the given commands in your ubuntu terminal.</p></li><li><p>Now you should see the agent in wazuh dashboard.<br> <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/e28c154ce1b4deffd0eed40436acb470_MD5.jpeg"                                     ></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This blog serves as an tutorial on  basic installation of SIEM lab at home using Wazuh which also doubles as a XDR.&lt;/p&gt;
&lt;p&gt;Wazuh is a fre</summary>
      
    
    
    
    <category term="SOC" scheme="https://blog.prashantgiri360.com.np/categories/SOC/"/>
    
    
    <category term="SIEM" scheme="https://blog.prashantgiri360.com.np/tags/SIEM/"/>
    
    <category term="tutorial" scheme="https://blog.prashantgiri360.com.np/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>HTB Sherlock Loggy Walkthrough</title>
    <link href="https://blog.prashantgiri360.com.np/HTB%20Sherlock%20Loggy%20Walkthrough/"/>
    <id>https://blog.prashantgiri360.com.np/HTB%20Sherlock%20Loggy%20Walkthrough/</id>
    <published>2025-04-04T12:35:00.000Z</published>
    <updated>2025-04-04T20:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="HTB-Easy-Sherlock"><a href="#HTB-Easy-Sherlock" class="headerlink" title="HTB Easy Sherlock"></a>HTB Easy Sherlock</h4><ul><li>Challenge: <a class="link"   href="https://app.hackthebox.com/sherlocks/Loggy" >https://app.hackthebox.com/sherlocks/Loggy<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li><li>Attachments:<ul><li>URL:<a class="link"   href="https://challenges-cdn.hackthebox.com/sherlocks/easy/Loggy.zip?u=1009643&p=mp&e=1743098469&t=1743091269&h=c588b7a8260a2bf99f149b27a3f155f0cb90a67fc83f564cfbe51f337d0e6f81" >https://challenges-cdn.hackthebox.com/sherlocks/easy/Loggy.zip?u=1009643&amp;p=mp&amp;e=1743098469&amp;t=1743091269&amp;h=c588b7a8260a2bf99f149b27a3f155f0cb90a67fc83f564cfbe51f337d0e6f81<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li><li>Password: hacktheblue</li></ul></li><li>Background:<blockquote><p>Janice from accounting is beside herself! She was contacted by the SOC to tell her that her work credentials were found on the dark web by the threat intel team. We managed to recover some files from her machine and sent them to the our REM analyst.</p></blockquote></li></ul><h1 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h1><p>This Sherlock is pretty easy. We don’t need to go too deep into the malware to answer the questions. We will use a VM (im using Flare VM). Download and extract the zip file using the given password. It contains few files and another zip file. The password for this zip file is in danger.txt. Use it to extract the zip file and there will be a .exe file we are supposed to analyze.  </p><ol><li><p>After extracting all of the files, we can use <em>Hash my files</em> tool to find the SHA-256 hash of the binary.</p></li><li><p>Lets use DIE (Detect it easy) tool to analyze the .exe file. We can see that the file is <em>PE64</em> executable and the language it was written in was <em>GO</em> and the exact version number too.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/a9db0611cc8dd262c069e0c0b376783c_MD5.jpeg"                                     ></p></li><li><p>The next question asks us for github repo used for data exfiltration. We we have to filter out all of “github” strings from the binary and analyze them. We can use <em>strings</em> tool for windows to do this.</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/4b3a36e20e8360556623439381183757_MD5.jpeg"                                     ></p><p>We can now go through the repos and see if any suspicious repo is present. We can see that a repo related to ftp is referenced. This is probably the one used for data exfiltration.</p><ol start="4"><li><p>There is other repo about screenshot. This probably means that the malware takes screenshot of the device. This also answers our question.</p></li><li><p>Lets decompile the malware to reveal further details about it. We can use <em>Ghidra</em> to do this. Opening the executable in <em>Code Browser</em> in Ghidra,</p></li><li><p>We will let the ghidra decompile the binary. In the meantime, the next question asks which function call suggests a file is written to disk. Lets look at the imports of the executable. It only imports KERNEL32.dll. Looking at the functions in the dll we find that <em>writefile</em> function is imported. This must be the answer.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/24db22351a8b64bdd5f2227141a8c941_MD5.jpeg"                                     ></p></li><li><p>Now, we are asked what is the ftp domain and hacker’s creds. Looking through the main.main function in the decompiled code. At the end, inside a <code>while(true)</code> loop, it calls <em>sendFilesViaFTP</em> function.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/b0e8ff1678d42b2ca4df11342273c6be_MD5.jpeg"                                     ></p></li></ol><p>Looking inside the function, there are the domain and login creds sitting there for us  in plain text.<br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/4d7a6f19f8f4a23f19ffc7f477ce1ade_MD5.jpeg"                                     ><br><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/684e410cf546f7c350cc5fd729c854ac_MD5.jpeg"                                     ></p><ol start="8"><li><p>To find which file is being written lets look at file handling function in the code. There’s a openfile() being called in line 117 few lines after the creds were initialized. Looking at the assembly code we can see the filename commented by Ghidra. <img                       lazyload                     src="/images/loading.svg"                     data-src="/images/58b05c509114e978d263e36322a78e6c_MD5.jpeg"                                     ></p></li><li><p>The next question is asking us to look at the log and find what was the changed password. Looking at the log.txt file, it has keycodes and stuff. Looking closely we can see some letters and the username and password is just there.</p></li><li><p>And the last question can be answered by just looking at the given images.</p></li></ol><h1 id="Answers"><a href="#Answers" class="headerlink" title="Answers"></a>Answers</h1><ol><li><p>What is the SHA-256 hash of this malware binary?<br>&#x3D; 6acd8a362def62034cbd011e6632ba5120196e2011c83dc6045fcb28b590457c</p></li><li><p>What programming language (and version) is this malware written in?<br>&#x3D; golang 1.22.3</p></li><li><p>There are multiple GitHub repos referenced in the static strings. Which GitHub repo would be most likely suggest the ability of this malware to exfiltrate data?<br>&#x3D; github.com&#x2F;jlaffaye&#x2F;ftp</p></li><li><p>What dependency, expressed as a GitHub repo, supports Janice’s assertion that she thought she downloaded something that can just take screenshots?<br>&#x3D; github.com&#x2F;kbinani&#x2F;screenshot</p></li><li><p>Which function call suggests that the malware produces a file after execution?<br>&#x3D; writefile</p></li><li><p>You observe that the malware is exfiltrating data over FTP. What is the domain it is exfiltrating data to?<br>&#x3D; gotthem.htb</p></li><li><p>What are the threat actor’s credentials?<br>&#x3D; NottaHacker:Cle@rtextP@ssword</p></li><li><p>What file keeps getting written to disk?<br>&#x3D; keylog.txt</p></li><li><p>When Janice changed her password, this was captured in a file. What is Janice’s username and password?<br>&#x3D; janice:Password123</p></li><li><p>What app did Janice have open the last time she ran the “screenshot app”?<br>&#x3D; Solitaire</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;HTB-Easy-Sherlock&quot;&gt;&lt;a href=&quot;#HTB-Easy-Sherlock&quot; class=&quot;headerlink&quot; title=&quot;HTB Easy Sherlock&quot;&gt;&lt;/a&gt;HTB Easy Sherlock&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Chal</summary>
      
    
    
    
    <category term="Malware Analysis" scheme="https://blog.prashantgiri360.com.np/categories/Malware-Analysis/"/>
    
    
    <category term="htb" scheme="https://blog.prashantgiri360.com.np/tags/htb/"/>
    
    <category term="walkthrough" scheme="https://blog.prashantgiri360.com.np/tags/walkthrough/"/>
    
    <category term="ctf" scheme="https://blog.prashantgiri360.com.np/tags/ctf/"/>
    
    <category term="Malware-Analysis" scheme="https://blog.prashantgiri360.com.np/tags/Malware-Analysis/"/>
    
  </entry>
  
</feed>
